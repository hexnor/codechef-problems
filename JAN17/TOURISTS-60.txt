##########################################################################################################
################ Programming Website Crawler (PWC) #######################################################
##########################################################################################################



CodeChef submission 12597449 (C++14) plaintext list. Status: CE, problem TOURISTS, contest JAN17. By yr96 (yr96), 2017-01-18 13:16:33.

	#include<stdio.h>
	#include<stdlib.h>
	#include<iostream>
	 
	#include <bits/stdc++.h>
	#include<algorithm>
	 
	#include<bits/basic_ios.h>
	void fast(int &number)
	{
	bool negative = false;
	register int c;
	 
	number = 0;
	 
	 
	c = getchar();
	if (c=='-')
	{
	
	negative = true;
	 
	
	c = getchar();
	}
	 
	 
	for (; (c>47 && c<58); c=getchar())
	number = number *10 + c - 48;
	 
	 
	if (negative)
	number *= -1;
	}
	 
	int *waitingfor,*goingfor;
	struct node
	{
	int data,pasd;
	struct node *next;
	};
	 
	 
	struct par
	{
	int visited;
	struct node *last;
	struct node *next;
	};
	 
	struct child
	{
	int visited;
	struct node *last;
	struct node *next;
	};
	struct child *c;
	 
	int *v,e,n;
	struct par *p;
	void fsd(int fun)
	{
	int i,f=0;
	for(i=1;i<=n;i++)
	{
	if(p[fun].visited==0 || p[fun].visited==0)
	f=1;
	}
	if(f==0)
	return;
	p[fun].visited=c[fun].visited=1;
	struct node *xss=(struct node*)malloc(sizeof(struct node));
	xss=c[fun].next;
	while(xss!=NULL)
	{
	if(v[xss->pasd]==0)
	{
	v[xss->pasd]=1;
	fsd(xss->data);
	}
	xss=xss->next;
	}
	struct node *xss1=(struct node*)malloc(sizeof(struct node));
	xss1=p[fun].next;
	while(xss1!=NULL)
	{
	if(v[xss1->pasd]==0)
	{
	v[xss1->pasd]=1;
	int tp=waitingfor[xss1->pasd];
	waitingfor[xss1->pasd]=goingfor[xss1->pasd];
	goingfor[xss1->pasd]=tp;
	fsd(xss1->data);
	}
	xss1=xss1->next;
	}
	}
	 
	 
	 
	int main()
	{ ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int i,j;
	fast(n);
	fast(e); v=(int*)malloc(e*sizeof(int));
	waitingfor=(int*)malloc(e*sizeof(int));
	goingfor=(int*)malloc(e*sizeof(int));
	int *val=(int*)malloc((n+1)*sizeof(int));
	c=(struct child*)malloc((n+1)*sizeof(struct child));
	p=(struct par*)malloc((n+1)*sizeof(struct par));
	for(i=1;i<=n;i++)
	{
	c[i].visited=p[i].visited=0;
	p[i].last=c[i].last=NULL;
	c[i].next=p[i].next=NULL;
	val[i]=waitingfor[i]=goingfor[i]=0;
	}
	for(i=0;i<e;i++)
	{
	v[i]=0;
	int a;
	fast(a);
	int b;
	fast(b);
	 
	val[a]++;
	val[b]++;
	goingfor[i]=b;
	waitingfor[i]=a;
	/*
	 
	 
	for (int i = 0 ;i < nodes; i++)
	{ //System.out.println(adj[i]);
	SortedMap<Integer, Integer> newmap = new TreeMap<>();
	newmap.putAll(map);
	Iterator<Integer> it=adj[i].iterator();
	newmap.values().remove(i);
	while(it.hasNext()){
	newmap.values().remove(it.next());
	}*/
	 
	if(c[a].last==NULL)
	{
	c[a].next=(struct node*)malloc(sizeof(struct node));
	(c[a].next)->pasd=i;
	(c[a].next)->data=b;
	 
	(c[a].next)->next=NULL;
	c[a].last=c[a].next;
	}
	else
	{
	(c[a].last)->next=(struct node*)malloc(sizeof(struct node));
	((c[a].last)->next)->data=b;
	((c[a].last)->next)->pasd=i;
	(c[a].last)->next->next=NULL;
	c[a].last=(c[a].last)->next;
	}
	if(p[b].last==NULL)
	{
	p[b].next=(struct node*)malloc(sizeof(struct node));
	(p[b].next)->data=a;
	(p[b].next)->pasd=i;
	(p[b].next)->next=NULL;
	p[b].last=p[b].next;
	}
	/*
	//System.out.println(map);
	for (int i = 0 ;i < nodes; i++)
	{ //System.out.println(adj[i]);
	SortedMap<Integer, Integer> newmap = new TreeMap<>();
	newmap.putAll(map);
	Iterator<Integer> it=adj[i].iterator();
	newmap.values().remove(i)("removing infexted"+newmap);
	while(it.hasNext()){
	newmap.values().remove(it.next());
	}*/
	else
	{
	(p[b].last)->next=(struct node*)malloc(sizeof(struct node));
	((p[b].last)->next)->data=a;
	((p[b].last)->next)->pasd=i;
	(p[b].last)->next->next=NULL;
	p[b].last=(p[b].last)->next;
	}
	}
	int f=0;
	if(e<n)
	f=1;
	for(i=1;i<=n;i++)
	{
	if(val[i]%2!=0)
	{
	f=1;
	 
	break;
	}
	}
	 
	 
	if(e>n*(n-1))
	f=1;
	fsd(1);
	for(int m=1;m<=n;m++)
	{
	if(p[m].visited==0)
	if(c[m].visited==0)
	{
	f=1;
	break;
	}
	}
	if(f==1)
	std::cout<<"NO"<<â��\nâ��; ;
	else
	{
	std::cout<<"YES"<<â��\nâ��; ;
	for(i=0;i<e;i++)
	{
	std::cout<<waitingfor[i]<<" "<<goingfor[i]<<â��\nâ��; ;
	}
	}
	/*
	//System.out.println(map);
	for (int i = 0 ;i < nodes; i++)
	{ //System.out.println(adj[i]);
	SortedMap<Integer, Integer> newmap = new TreeMap<>();
	newmap.putAll(map);
	Iterator<Integer> it=adj[i].iterator();
	newmap.values().remove(i);//System.out.println("removing infexted"+newmap);
	while(it.hasNext()){
	newmap.values().remove(it.next());
	}*/
	return 0;
	}
	 
	 
	 
	

##########################################################################################################
################  FOR MORE INFO CONTACT ME AT yokeshrana@gmail.com  #######################################
##########################################################################################################


