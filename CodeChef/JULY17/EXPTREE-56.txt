##########################################################################################################
################ Programming Website Crawler (PWC) #######################################################
##########################################################################################################



CodeChef submission 14557546 (JAVA) plaintext list. Status: AC, problem EXPTREE, contest JULY17. By yr96 (yr96), 2017-07-15 04:26:05.

	 
	 
	 
	import java.io.DataInputStream;
	import java.io.FileInputStream;
	import java.io.IOException;
	import java.io.InputStreamReader;
	import java.math.BigInteger;
	import java.util.Scanner;
	import java.util.StringTokenizer;
	 
	class Code2
	{
	private static long modInverse(long a, long m)
	{
	BigInteger b=BigInteger.valueOf(a);
	b=b.modInverse(BigInteger.valueOf(m));
	return b.longValue();
	}
	private static long gcd(long a, long b) {
	if (a == 0)
	return b;
	return gcd(b%a, a);
	}
	private static void calculate(long n,long val1, long val2, long x, long y) {
	
	// long temp=n-3;
	// System.out.println(val1 +" " + temp+" " +val2);
	long num1=val1/gcd(val1,n);
	long temp=n/gcd(val1,n);
	long num2=val2/gcd(val2,n);
	temp=temp/gcd(val2,n);
	// System.out.println(num1 +" " + temp+" " +num2);
	System.out.println((((((num1%x)*(num2%x))%x)%x)
	*( modInverse(temp, x)%x))%x + " "
	+((( ((num1%y)*(num2%y))%y)%y)
	*(modInverse(temp, y)%y))%y);
	}
	
	 
	
	static class Reader
	{
	final private int BUFFER_SIZE = 1 << 16;
	private DataInputStream din;
	private byte[] buffer;
	private int bufferPointer, bytesRead;
	 
	public Reader()
	{
	din = new DataInputStream(System.in);
	buffer = new byte[BUFFER_SIZE];
	bufferPointer = bytesRead = 0;
	}
	 
	public Reader(String file_name) throws IOException
	{
	din = new DataInputStream(new FileInputStream(file_name));
	buffer = new byte[BUFFER_SIZE];
	bufferPointer = bytesRead = 0;
	}
	 
	public String readLine() throws IOException
	{
	byte[] buf = new byte[64]; // line length
	int cnt = 0, c;
	while ((c = read()) != -1)
	{
	if (c == '\n')
	break;
	buf[cnt++] = (byte) c;
	}
	return new String(buf, 0, cnt);
	}
	 
	public int nextInt() throws IOException
	{
	int ret = 0;
	byte c = read();
	while (c <= ' ')
	c = read();
	boolean neg = (c == '-');
	if (neg)
	c = read();
	do
	{
	ret = ret * 10 + c - '0';
	} while ((c = read()) >= '0' && c <= '9');
	 
	if (neg)
	return -ret;
	return ret;
	}
	 
	public long nextLong() throws IOException
	{
	long ret = 0;
	byte c = read();
	while (c <= ' ')
	c = read();
	boolean neg = (c == '-');
	if (neg)
	c = read();
	do {
	ret = ret * 10 + c - '0';
	}
	while ((c = read()) >= '0' && c <= '9');
	if (neg)
	return -ret;
	return ret;
	}
	 
	public double nextDouble() throws IOException
	{
	double ret = 0, div = 1;
	byte c = read();
	while (c <= ' ')
	c = read();
	boolean neg = (c == '-');
	if (neg)
	c = read();
	 
	do {
	ret = ret * 10 + c - '0';
	}
	while ((c = read()) >= '0' && c <= '9');
	 
	if (c == '.')
	{
	while ((c = read()) >= '0' && c <= '9')
	{
	ret += (c - '0') / (div *= 10);
	}
	}
	 
	if (neg)
	return -ret;
	return ret;
	}
	 
	private void fillBuffer() throws IOException
	{
	bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
	if (bytesRead == -1)
	buffer[0] = -1;
	}
	 
	private byte read() throws IOException
	{
	if (bufferPointer == bytesRead)
	fillBuffer();
	return buffer[bufferPointer++];
	}
	 
	public void close() throws IOException
	{
	if (din == null)
	return;
	din.close();
	}
	}
	 
	public static void main(String[] args) throws IOException
	{
	Reader s=new Reader();
	long x= 1000000007,y=1000000009;
	long t=s.nextLong();
	while(t-->0){
	
	long n=s.nextLong();
	long val1=n,val2 = val1-1;
	if(n%2==1)
	val2=(n-1)/2; //odd
	else
	val1=n/2;
	if(n!=0)
	calculate(2*n-3,val1,val2,x,y);
	else
	System.out.println("0 0");
	
	
	}
	
	
	
	
	}
	}
	 
	

##########################################################################################################
################  FOR MORE INFO CONTACT ME AT yokeshrana@gmail.com  #######################################
##########################################################################################################


