##########################################################################################################
################ Programming Website Crawler (PWC) #######################################################
##########################################################################################################



CodeChef submission 12539226 (C++14) plaintext list. Status: WA, problem TOURISTS, contest JAN17. By yr96 (yr96), 2017-01-13 22:10:51.

	#include <iostream>
	#include <cstdio>
	#include <cstdlib>
	#include <string>
	#include <cstring>
	#include <algorithm>
	using namespace std;
	 
	#define repi(y,a) for(int i=y;i<a;i++)
	#define repj(b,a) for(int j=b;j<a;j++)
	#include <vector>
	 
	const int maxn = 10000;
	const int INF = 0x7777777;
	#include <stack>
	#include <map>
	#include <queue>
	 
	 
	 
	 
	int n, m;
	int S, T;
	 
	struct Edge
	{
	int from, to, flow, cap;
	Edge(int a, int b, int c, int d) :from(a), to(b), flow(c), cap(d){}
	Edge(){}
	};
	 
	vector<Edge> edges;
	vector<int> G[maxn];
	int dis[maxn], vis[maxn], cur[maxn];
	 
	void AddEdge(int u, int v, int cap)
	{
	edges.push_back(Edge(u, v, 0, cap));
	edges.push_back(Edge(v, u, 0, 0));
	int len = edges.size();
	 
	G[v].push_back(len - 1);
	G[u].push_back(len - 2);
	 
	}
	 
	bool BFS()
	{
	queue<int> Q;
	memset(vis, 0, sizeof(vis));
	Q.push(S);
	dis[S] = 0;
	vis[S] = 1;
	 
	while (!Q.empty())
	{
	int u = Q.front();
	Q.pop();
	for (int i : G[u])
	{
	Edge& e = edges[i];
	if (e.cap > e.flow && !vis[e.to])
	{
	vis[e.to] = 1;
	dis[e.to] = dis[u] + 1;
	Q.push(e.to);
	}
	}
	}
	return vis[T];
	}
	 
	int DFS(int x, int a)
	{
	if (x == T || a == 0) return a;
	int flow = 0, f;
	for (int& i = cur[x]; i < G[x].size(); i++)
	{
	Edge& e = edges[G[x][i]];
	if (dis[e.to] == dis[x] + 1 && (f = DFS(e.to, min(a, e.cap - e.flow))) > 0)
	{
	flow += f;
	e.flow += f;
	edges[G[x][i] ^ 1].flow -= f;
	a -= f;
	if (a == 0) break;
	}
	}
	return flow;
	}
	 
	int Max_Flow()
	{
	int flow = 0;
	while (BFS())
	{
	memset(cur, 0, sizeof(cur));
	flow += DFS(S, INF);
	}
	return flow;
	}
	 
	int graph[maxn][maxn];
	int out[maxn];
	int arrayst;
	int fg=0;
	void dfs(int pos)
	{
	 
	for (int i = 1; i <= n; i++)
	{
	if (graph[pos][i]>0)
	{
	graph[pos][i]--;
	 
	dfs(i);
	 
	out[arrayst++] = i;
	}
	}
	 
	}
	 
	void printingthesolution()
	{
	int Len = edges.size();
	for (int i = 0; i < Len; i++)
	{
	if (edges[i].cap == 1 && edges[i].flow == 1 && edges[i].from != 0 && edges[i].to != 0 && edges[i].from != n + 1 && edges[i].to != n + 1)
	{
	graph[edges[i].from][edges[i].to]++;
	graph[edges[i].to][edges[i].from]--;
	}
	}
	arrayst = 0;
	dfs(1);
	 
	out[arrayst++] = 1;
	reverse(out, out + arrayst);
	 
	 
	for (int i = 1; i < arrayst; i++)
	{
	printf("%d %d\n", out[i-1],out[i]);
	 
	 
	 
	}
	//printf("1\n");
	printf("\n");
	 
	}
	 
	int main()
	{
	//freopen("in.txt", "r", stdin);
	int kase=1;
	 
	int inc[maxn], out[maxn];
	int a, b;
	char type;
	while (kase--)
	{
	 
	 
	edges.clear();
	memset(inc, 0, sizeof(inc));
	memset(out, 0, sizeof(out));
	memset(graph, 0, sizeof(graph));
	 
	scanf("%d%d",&n,&m);
	int check[2*n];
	int y=0;
	int laggayi=0;
	S = 0;
	T = n + 1;
	repi(0, n + 2) G[i].clear();
	int nodes[n]{};
	repi(0, m)
	{
	scanf("%d%d",&a,&b);
	nodes[a]=1;
	nodes[b]=1;
	if(a==b)
	laggayi=1;
	check[y++]=a;
	check[y++]=b;
	type='U';
	if (type == 'U')
	{
	out[a]++, inc[b]++;
	//out[b]++, inc[a]++;
	AddEdge(a, b, 1);
	AddEdge(b, a, 1);
	graph[a][b] ++;
	}
	if (type == 'D')
	{
	out[a]++, inc[b]++;
	graph[a][b] ++;
	 
	}
	}
	 
	fflush(stdin);
	bool tag = true;
	int X, cnt = 0;
	repi(1, n + 1)
	{
	if (inc[i] > out[i])
	{
	X = (inc[i] - out[i]) / 2;
	if ((inc[i] - out[i]) & 1) {
	tag = false;
	break;
	}
	AddEdge(S, i, X);
	cnt += X;
	}
	if (out[i] > inc[i])
	{
	X = (out[i] - inc[i]) / 2;
	if ((out[i] - inc[i]) & 1){
	tag = false;
	break;
	}
	AddEdge(i, T, X);
	}
	}
	 
	int d=0;
	 
	if (tag)
	{
	if (Max_Flow() == cnt)
	{fg=1;
	for (int i = 1; i < arrayst; i++)
	{
	 
	int cu=check[d],ne=check[++d];d++;
	if((cu==out[i-1]&&ne==out[i-1])||(ne==out[i-1]&&cu==out[i-1]))
	fg=1;else
	fg=0;
	}int modus=0;
	for(int k=0;k<n;k++)
	modus+=nodes[k];
	if(modus!=n)fg=0;
	if(n==1)fg=0;
	if(fg==1){if(laggayi==1)
	printf("NO");else{
	printf("YES\n");
	printingthesolution();}}
	}else fg=0;
	}
	else fg=0;
	if(fg==0)printf("NO");
	 
	 
	 
	}
	return 0;
	}
	

##########################################################################################################
################  FOR MORE INFO CONTACT ME AT yokeshrana@gmail.com  #######################################
##########################################################################################################


