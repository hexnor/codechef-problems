##########################################################################################################
################ Programming Website Crawler (PWC) #######################################################
##########################################################################################################



CodeChef submission 12535503 (C++14) plaintext list. Status: WA, problem TOURISTS, contest JAN17. By yr96 (yr96), 2017-01-13 18:54:15.

	 
	#include<iostream>
	#include<string>
	#include<algorithm>
	#include<stack>
	#include<cmath>
	#include<queue>
	#include<cstdlib>
	#include<cstdio>
	#include<set>
	 
	#define REP(i,r,n) for(int i=r;i<=n;i++)
	#define RREP(i,n,r) for
	#include<map>
	#include<vector>
	#include<cstring>
	 
	#define CL(x,v); memset(x,v,sizeof(x));
	#define INF 0x3f3f3f3f
	#define LL long long(int i=n;i>=r;i--)
	 
	using namespace std;
	const int MAXN=1000;
	int n,m;
	struct CONNECT{
	int from,to;
	};
	vector<CONNECT> edges2;
	vector<int> G2[MAXN];
	struct Edge{
	int from,to,cap,flow;
	};
	bool cmp(const Edge& a,const Edge& b){
	return a.from < b.from || (a.from == b.from && a.to < b.to);
	}
	 
	 
	 
	 
	 
	 
	 
	 
	 
	struct Dinic{
	int n,m,s,t;
	vector<Edge> edges;
	vector<int> G[MAXN];
	bool vis[MAXN];
	int d[MAXN];
	int cur[MAXN];
	void init(int n){
	this->n=n;
	for(int i=0;i<=n;i++)G[i].clear();
	edges.clear();
	}
	void AddEdge(int from,int to,int cap){
	edges.push_back((Edge){from,to,cap,0});
	edges.push_back((Edge){to,from,0,0});
	m=edges.size();
	G[from].push_back(m-2);
	G[to].push_back(m-1);
	}
	bool BREADTHFIRSTSEARCH(){
	CL(vis,0);
	queue<int> Q;
	Q.push(s);
	d[s]=0;
	vis[s]=1;
	while(!Q.empty()){
	int x=Q.front();
	Q.pop();
	for(int i=0;i<G[x].size();i++){
	Edge& e=edges[G[x][i]];
	if(!vis[e.to]&&e.cap>e.flow){
	vis[e.to]=1;
	d[e.to]=d[x]+1;
	Q.push(e.to);
	}
	}
	}
	return vis[t];
	}
	int BREADTHFIRSTSEARCH(int x,int a){
	if(x==t||a==0)return a;
	int flow=0,f;
	for(int& i=cur[x];i<G[x].size();i++){
	Edge& e=edges[G[x][i]];
	if(d[x]+1==d[e.to]&&(f=BREADTHFIRSTSEARCH(e.to,min(a,e.cap-e.flow)))>0){
	e.flow+=f;
	edges[G[x][i]^1].flow-=f;
	flow+=f;
	a-=f;
	if(a==0)break;
	}
	}
	return flow;
	}
	 
	int Maxflow(int s,int t,int need){
	this->s=s;this->t=t;
	int flow=0;
	while(BREADTHFIRSTSEARCH()){
	CL(cur,0);
	flow+=BREADTHFIRSTSEARCH(s,INF);
	if(flow>need)return flow;
	}
	return flow;
	}
	 
	vector<int> Mincut(){
	BREADTHFIRSTSEARCH();
	vector<int> ans;
	for(int i=0;i<edges.size();i++){
	Edge& e=edges[i];
	if(vis[e.from]&&!vis[e.to]&&e.cap>0)ans.push_back(i);
	}
	return ans;
	}
	void Reduce(){
	for(int i = 0; i < edges.size(); i++) edges[i].cap -= edges[i].flow;
	}
	void ClearFlow(){
	for(int i = 0; i < edges.size(); i++) edges[i].flow = 0;
	}
	};
	 
	Dinic solver;
	int in[MAXN],out[MAXN];
	stack<int> S;
	int vis[MAXN*MAXN];
	void build()
	{
	for(int i=0;i<solver.edges.size();i++)
	{
	Edge e=solver.edges[i];
	if(e.from>=1&&e.from<=n&&e.to>=1&&e.to<=n&&e.cap>0)
	{
	if(e.flow)
	{
	edges2.push_back((CONNECT){e.to,e.from});
	int mm=edges2.size();
	G2[e.to].push_back(mm-1);
	}
	else
	{
	edges2.push_back((CONNECT){e.from,e.to});
	int mm=edges2.size();
	G2[e.from].push_back(mm-1);
	}
	}
	}
	}
	void BREADTHFIRSTSEARCH(int u)
	{
	for(int i=0;i<G2[u].size();i++)
	{
	int mm=G2[u][i];
	CONNECT e=edges2[mm];
	int v=e.to;
	 
	if(!vis[mm])
	{
	vis[mm]=1;
	BREADTHFIRSTSEARCH(v);
	}
	}
	S.push(u);
	}
	int main()
	{
	int T=1;
	 
	for(int test=1;test<=T;test++)
	{
	scanf("%d%d",&n,&m);
	solver.init(n+2);
	int s=0,t=n+1;
	for(int i=0;i<=n;i++)G2[i].clear();
	edges2.clear();
	CL(in,0);
	CL(out,0);
	int a,b;char c;
	for(int i=0;i<m;i++)
	{
	scanf("%d%d",&a,&b);
	c='U';
	if(c=='U')
	{
	solver.AddEdge(a,b,1);
	in[b]++;out[a]++;
	}
	}
	bool flag=true;
	for(int i=1;i<=n;i++)
	if(abs(in[i]-out[i])&1)
	{
	flag=false;break;
	}
	if(!flag)
	{
	printf("NO\n");
	if(test!=T)printf("\n");
	continue;
	}
	int sum=0;
	for(int i=1;i<=n;i++)
	{
	if(in[i]>out[i])
	{
	solver.AddEdge(i,t,(in[i]-out[i])/2);
	}
	else if(out[i]>in[i])
	{
	solver.AddEdge(s,i,(out[i]-in[i])/2);
	sum+=abs(in[i]-out[i])/2;
	}
	}
	if(sum!=solver.Maxflow(s,t,INF))
	{
	printf("NO\n");
	if(test!=T)printf("\n");
	continue;
	}
	build();
	while(!S.empty())S.pop();
	CL(vis,0);
	BREADTHFIRSTSEARCH(1);
	 
	int fg=0;
	while(!S.empty())
	{
	if(fg==0)
	{printf("YES\n");
	fg++;
	}
	int val=S.top();
	if(!S.empty())
	{
	S.pop();
	if(!S.empty()){S.push(val);
	printf("%d ",S.top());}}
	if(!S.empty())
	S.pop();
	if(!S.empty())
	printf("%d \n",S.top());
	 
	 
	}
	printf("\n");
	if(test!=T)printf("\n");
	}
	return 0;
	}
	

##########################################################################################################
################  FOR MORE INFO CONTACT ME AT yokeshrana@gmail.com  #######################################
##########################################################################################################


