##########################################################################################################
################ Programming Website Crawler (PWC) #######################################################
##########################################################################################################



CodeChef submission 12830689 (C++14) plaintext list. Status: AC, problem MFREQ, contest FEB17. By yr96 (yr96), 2017-02-12 19:56:39.

	#include <bits/stdc++.h>
	#define ll long long int
	#include <cstdio>
	#include <iostream>
	using namespace std;
	 
	/* fast io refer to https://discuss.codechef.com/questions/6677/cool-fast-io-implementation */
	static struct IO {
	char tmp[1 << 10];
	 
	// fast input routines
	char cur;
	 
	//#define nextChar() (cur = getc_unlocked(stdin))
	//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }
	 
	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
	 
	inline IO& operator >> (char & c) { c = nextChar(); return *this; }
	 
	inline IO& operator >> (char * buf) {
	if (skipBlanks()) {
	if (peekChar()) {
	*(buf++) = peekChar();
	while (!isBlank(nextChar())) *(buf++) = peekChar();
	} *(buf++) = 0; } return *this; }
	 
	inline IO& operator >> (string & s) {
	if (skipBlanks()) { s.clear(); s += peekChar();
	while (!isBlank(nextChar())) s += peekChar(); }
	return *this; }
	 
	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
	 
	#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
	if (skipBlanks()) { \
	int sign = +1; \
	if (peekChar() == '-') { \
	sign = -1; \
	n = nextChar() - '0'; \
	} else \
	n = peekChar() - '0'; \
	while (!isBlank(nextChar())) { \
	n += n + (n << 3) + peekChar() - 48; \
	} \
	n *= sign; \
	} \
	return *this; \
	}
	 
	defineInFor(int)
	defineInFor(unsigned int)
	defineInFor(long long)
	 
	// fast output routines
	 
	//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
	 
	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
	 
	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }
	 
	 
	#define defineOutFor(intType) \
	inline char * toString(intType n) { \
	char * p = (tmp + 30); \
	if (n) { \
	bool isNeg = 0; \
	if (n < 0) isNeg = 1, n = -n; \
	while (n) \
	*--p = (n % 10) + '0', n /= 10; \
	if (isNeg) *--p = '-'; \
	} else *--p = '0'; \
	return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }
	 
	defineOutFor(int)
	defineOutFor(long long)
	 
	#define endl ('\n')
	#define cout __io__
	#define cin __io__
	} __io__;
	 
	 
	/*
	5 1
	1 2 2 2 2
	1 5 3
	2*/
	int main() {
	 
	map<ll,pair<ll,ll> > val;
	map<ll,pair<ll,ll> > ::iterator it,prit,rm; /* L frequency element*/
	ll N,Q;
	cin>>N>>Q;
	 
	ll ele,prevele=-1,start=1;
	// for(int i=1;i<=N;i++)
	// cout<<i<<" ";
	// cout<<endl;
	for(register ll i=1;i<=N;i++){
	cin>>ele;
	static ll frequency=1;
	if(prevele==ele)
	{
	frequency++;
	rm=val.find(start);
	val.erase(rm);
	val.insert(make_pair(start,make_pair(frequency,ele)));
	// cout<<"\ninserted "<<start << " "<<frequency<< " "<<ele<<endl;
	}else
	{
	start=i,frequency=1;
	val.insert(make_pair(start,make_pair(frequency,ele)));
	// cout<<"\ninserted "<<start << " "<<frequency<< " "<<ele<<endl;
	}
	 
	prevele=ele;
	}
	// for(it=val.begin();it!=val.end();it++)
	// cout<<"start= "<<it->first<<" frequency = " <<it->second.first<<" element= " <<it->second.second<<endl;
	 
	//For queries
	for(register ll i=0;i<Q;i++){
	 
	ll l,r,k;
	cin>>l>>r>>k;
	ll maximum=0,element=-1;
	 
	// case lying outside
	it=val.upper_bound(l);
	 
	//cout<<"present value"<<it->first<<endl;
	if(it!=val.end()){ //case when found
	if(it->first!=l) /* seeing what is the max in previous one*/
	{
	it--;
	prit=it;
	it++;
	ll freq=it->first-l;
	if(freq>=k)
	{element=prit->second.second;
	maximum=freq;
	}
	//checking inside ones jab tak ki start<=r
	bool endcheck=false;
	while((it->first<=r)&&(it!=val.end())){
	 
	 
	if((it==val.end())||(it->first>r))
	endcheck=true;
	 
	 
	if(endcheck==false)
	{if((it->second.first>maximum)&&(it->second.first>=k))
	{
	maximum=it->second.first;
	element=it->second.second;
	}}
	else
	{ if(it->first!=r)
	if(((r-(it->first))>=maximum)&&((r-(it->first)>=k)))
	{
	maximum=r-(it->first)+1;
	element=it->second.second;
	}
	 
	}
	it++;
	}
	}
	 
	}else{
	it--;
	if(it->first<=r){
	if(it->second.first>=k&&it->second.first>maximum)
	{
	maximum=it->second.first;
	element=it->second.second;
	}
	}
	 
	}
	 
	if(element!=-1)
	cout<<element<<endl;else
	cout<<"-1"<<endl;
	 
	/* 1 1 1 1 2 2 2 2 3 3 3 3*/
	}
	 
	return 0;
	}
	

##########################################################################################################
################  FOR MORE INFO CONTACT ME AT yokeshrana@gmail.com  #######################################
##########################################################################################################


